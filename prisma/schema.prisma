// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Author {
  id        Int      @id @default(autoincrement())
  name      String?
  age       Int
  books     Book[]   // Relacionamento inverso
}

model Book {
  id            Int      @id @default(autoincrement())
  title         String   @db.VarChar(255)
  pages         Int
  chapters      Int
  isbn          String @db.VarChar(255) 
  publishedName String  
  authorId      Int      // Chave estrangeira
  author        Author   @relation(fields: [authorId], references: [id])
}

// Exemplo para validar o isbn 

// const isbnRegex = /^(?:ISBN(?:-10)?:?\s)?(?=[0-9X]{10}$|(?=(?:[0-9]+[- ]){3})[- 0-9X]{13}$)[0-9]{1,5}[- ]?[0-9]+[- ]?[0-9]+[- ]?[0-9X]$/;

// function validateISBN(isbn: string): boolean {
//   return isbnRegex.test(isbn);
// }

// // Função de exemplo para criar um livro
// async function createBook(data: { title: string, pages: number, chapters: number, isbn: string, publishedName: string, authorId: number }) {
//   if (!validateISBN(data.isbn)) {
//     throw new Error('ISBN format must be a valid format');
//   }

//   const newBook = await prisma.book.create({
//     data,
//   });

//   return newBook;
// }

